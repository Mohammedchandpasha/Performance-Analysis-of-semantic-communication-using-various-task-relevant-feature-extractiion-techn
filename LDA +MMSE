import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.metrics import accuracy_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical

# 1. Load and preprocess MNIST dataset
mnist = fetch_openml('mnist_784', version=1, as_frame=False)
X, y = mnist.data / 255.0, mnist.target.astype(int)
X = X[:10000]
y = y[:10000]

# 2. Apply LDA 
lda = LinearDiscriminantAnalysis(n_components=9)
Z_lda = lda.fit_transform(X, y)

# 3. Define MIMO channel
def mimo_channel(Z, n_tx, n_rx):
    if Z.shape[1] < n_tx:
        Z = np.hstack((Z, np.zeros((Z.shape[0], n_tx - Z.shape[1]))))
    else:
        Z = Z[:, :n_tx]
    H = (np.random.randn(n_rx, n_tx) + 1j * np.random.randn(n_rx, n_tx)) / np.sqrt(2)
    Y_clean = Z @ H.T
    return Y_clean, H

# 4. SNR setup
snr_db_train_range = [0, 5, 10, 15, 20, 25, 30]
snr_db_test_range = [0, 5, 10, 15, 20, 25, 30]

accuracies = {train_snr: [] for train_snr in snr_db_train_range}

# 5. Train and test across SNRs
for train_snr_db in snr_db_train_range:
    print(f"\nTraining at {train_snr_db} dB...")
    n_tx, n_rx = antenna_config
    Y_clean, H = mimo_channel(Z_lda, n_tx, n_rx)

    signal_power = np.mean(np.abs(Y_clean)**2)
    snr_linear_train = 10 ** (train_snr_db / 10)
    noise_power_train = signal_power / snr_linear_train
    noise_train = (np.random.randn(*Y_clean.shape) + 1j * np.random.randn(*Y_clean.shape)) * np.sqrt(noise_power_train / 2)
    Y_train_noisy = Y_clean + noise_train

    # MMSE equalization
    H_herm = H.conj().T
    H_mmse_inv = np.linalg.inv(H_herm @ H + noise_power_train * np.eye(H.shape[1]))
    W_mmse = H_mmse_inv @ H_herm
    Z_train_recovered = (Y_train_noisy @ W_mmse.T).real

    X_train, _, y_train, _ = train_test_split(Z_train_recovered, y, test_size=0.2, random_state=42)
    y_train_cat = to_categorical(y_train, num_classes=10)

    clf = Sequential([
        Dense(32, activation='relu', input_shape=(Z_train_recovered.shape[1],)),
        Dense(10, activation='softmax')
    ])
    clf.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])
    clf.fit(X_train, y_train_cat, epochs=10, batch_size=128, verbose=0)

    for test_snr_db in snr_db_test_range:
        snr_linear_test = 10 ** (test_snr_db / 10)
        noise_power_test = signal_power / snr_linear_test
        noise_test = (np.random.randn(*Y_clean.shape) + 1j * np.random.randn(*Y_clean.shape)) * np.sqrt(noise_power_test / 2)
        Y_test_noisy = Y_clean + noise_test

        H_mmse_inv_test = np.linalg.inv(H_herm @ H + noise_power_test * np.eye(H.shape[1]))
        W_mmse_test = H_mmse_inv_test @ H_herm
        Z_test_recovered = (Y_test_noisy @ W_mmse_test.T).real

        X_test, _, y_test, _ = train_test_split(Z_test_recovered, y, test_size=0.2, random_state=42)
        y_pred = np.argmax(clf.predict(X_test, verbose=0), axis=1)
        acc = accuracy_score(y_test, y_pred)
        accuracies[train_snr_db].append(acc * 100)
        print(f"    Test SNR {test_snr_db} dB â†’ Accuracy: {acc * 100:.2f}%")

# 6. Plotting
plt.figure(figsize=(10, 6))
for train_snr_db in snr_db_train_range:
    plt.plot(snr_db_test_range, accuracies[train_snr_db], marker='o', label=f'Train SNR = {train_snr_db} dB')

plt.title('Accuracy vs Test SNR using LDA + MMSE', fontsize=14)
plt.xlabel('Test SNR (dB)', fontsize=12)
plt.ylabel('Classification Accuracy (%)', fontsize=12)
plt.ylim(0, 100)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()
